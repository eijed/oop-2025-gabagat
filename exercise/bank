// bank (check)
// capital, deposit, withdrawal, savings (check)
// teller (check)
// customer (check)
// receipt (check)

import java.util.ArrayList;
import java.util.Scanner;

public class bank {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        Bank bank = new Bank();
        Teller teller = new Teller("Danna");

        // Create a customer savings account and add to bank
        SavingsAccount account = new SavingsAccount("Aldrich", 1000, 2.5);
        bank.addAccount(account);

        boolean running = true;
        while (running) {
            System.out.println("===== BANK MENU =====");
            System.out.println("[1] Deposit");
            System.out.println("[2] Withdraw");
            System.out.println("[3] View Account Info");
            System.out.println("[4] View Total Bank Capital");
            System.out.println("[5] Exit");
            System.out.print("Enter choice: ");
            int choice = sc.nextInt();

            if (choice == 1) {
                System.out.print("Enter deposit amount: ");
                double amount = sc.nextDouble();
                teller.processDeposit(account, amount);

            } else if (choice == 2) {
                System.out.print("Enter withdrawal amount: ");
                double amount = sc.nextDouble();
                teller.processWithdrawal(account, amount);

            } else if (choice == 3) {
                account.displayAccountInfo();

            } else if (choice == 4) {
                System.out.println("\nTotal Bank Capital: $" + bank.getTotalCapital());

            } else if (choice == 5) {
                running = false;
                System.out.println("\nThank you for banking with us!");

            } else {
                System.out.println("\nInvalid choice.");
            }
        }

        sc.close();
    }
}

// Bank class
class Bank {
    private ArrayList<SavingsAccount> accounts = new ArrayList<>();

    public void addAccount(SavingsAccount c) {
        accounts.add(c);
    }

    public double getTotalCapital() {
        double total = 0;
        for (SavingsAccount c : accounts) {
            total += c.getSavings();
        }
        return total;
    }
}

// Abstract Person class
abstract class Person {
    protected String name;

    public Person(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public abstract void displayInfo();
}

// Account class
class Account extends Person {
    protected double savings;

    public Account(String name, double initialDeposit) {
        super(name);
        this.savings = initialDeposit;
    }

    public double getSavings() {
        return savings;
    }

    public void deposit(double amount) {
        savings += amount;
    }

    public boolean withdraw(double amount) {
        if (amount <= savings) {
            savings -= amount;
            return true;
        }
        return false;
    }

    @Override
    public void displayInfo() {
        System.out.println("Account: " + name + " | Balance: $" + savings);
    }
}

// SavingsAccount class
class SavingsAccount extends Account {
    private double interestRate;

    public SavingsAccount(String name, double initialDeposit, double interestRate) {
        super(name, initialDeposit);
        this.interestRate = interestRate;
    }

    public void applyInterest() {
        double interest = savings * interestRate / 100;
        savings += interest;
        System.out.println("\nInterest Applied: $" + interest);
    }

    public void displayAccountInfo() {
        System.out.println("\n===== ACCOUNT INFO =====");
        System.out.println("Name: " + name);
        System.out.println("Account Type: Savings");
        System.out.println("Balance: $" + savings);
        System.out.println("Interest Rate: " + interestRate + "%");
        System.out.println("========================\n");
    }
}

// Teller class
class Teller extends Person {
    public Teller(String name) {
        super(name);
    }

    public void processDeposit(SavingsAccount account, double amount) {
        account.deposit(amount);
        printReceipt(account, "Deposit", amount);
    }

    public void processWithdrawal(SavingsAccount account, double amount) {
        if (account.withdraw(amount)) {
            printReceipt(account, "Withdrawal", amount);
        } else {
            System.out.println("\nInsufficient funds.");
        }
    }

    private void printReceipt(SavingsAccount account, String type, double amount) {
        System.out.println("\n===== BANK RECEIPT =====");
        System.out.println("Teller: " + this.name);
        System.out.println("Customer: " + account.getName());
        System.out.println("Transaction: " + type);
        System.out.println("Amount: $" + amount);
        System.out.println("New Balance: $" + account.getSavings());
        System.out.println("========================\n");
    }

    @Override
    public void displayInfo() {
        System.out.println("Teller: " + name);
    }
}
